<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AppleCatKay.Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-19T06:08:06.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LuLiangXiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/04/19/UI%E5%88%86%E6%9E%90%E5%88%A9%E5%99%A8%20Reveal%E7%9A%84%E7%A0%B4%E8%A7%A3%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/04/19/UI分析利器 Reveal的破解及使用/</id>
    <published>2016-04-19T06:08:06.000Z</published>
    <updated>2016-04-19T06:08:06.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;UI分析利器-Reveal的破解及使用&quot;&gt;&lt;a href=&quot;#UI分析利器-Reveal的破解及使用&quot; class=&quot;headerlink&quot; title=&quot;UI分析利器 Reveal的破解及使用&quot;&gt;&lt;/a&gt;UI分析利器 Reveal的破解及使用&lt;/h1&gt;&lt;p&gt;标签： 工具&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;话不多说 当然，有能力的还是支持正版&lt;br&gt;&lt;a href=&quot;http://upload-images.jianshu.io/upload_images/1449048-4e7ea3b4f6181571.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://upload-images.jianshu.io/upload_images/1449048-4e7ea3b4f6181571.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;破解包&lt;/a&gt;&lt;br&gt;下载完之后将软件运行一次并用Finder拖到应用程序里&lt;br&gt;右键显示包内容，再点击contents&amp;gt;MAC OS&lt;br&gt;将Reveal文件改名，再把解压出来的破解包内容拷进去&lt;br&gt;重新打开软件 破解成功&lt;br&gt;点击window&amp;gt;show Reveal library in Finder&amp;gt;ios&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1449048-4e7ea3b4f6181571.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;此时打开了Reveal.framework&lt;br&gt;将framework拖入需要使用Reveal分析的XCode程序里&lt;br&gt;注意一定要勾选copy if needed&lt;br&gt;再点击项目配置 找到Linked Frameworks and Libraries&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1449048-0e6a828ae033accb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt; 把Reveal.framework给移除掉&lt;br&gt;再点击Bulid Settings 搜索Other Linker Flags&lt;br&gt;加入如下一行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-ObjC -framework Reveal
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后运行程序，再到Reveal界面中选择你当前运行的模拟器&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1449048-6145315f65f25c26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;ok 大功告成&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1449048-dd91f6194005e0c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UI分析利器-Reveal的破解及使用&quot;&gt;&lt;a href=&quot;#UI分析利器-Reveal的破解及使用&quot; class=&quot;headerlink&quot; title=&quot;UI分析利器 Reveal的破解及使用&quot;&gt;&lt;/a&gt;UI分析利器 Reveal的破解及使用&lt;/h1&gt;&lt;p&gt;标签： 工具&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/04/19/Swift%E4%B8%AD%E7%9A%84%E7%95%8C%E9%9D%A2%E4%BC%A0%E5%80%BC/"/>
    <id>http://yoursite.com/2016/04/19/Swift中的界面传值/</id>
    <published>2016-04-19T06:04:26.000Z</published>
    <updated>2016-04-19T06:04:26.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Swift中的界面传值&quot;&gt;&lt;a href=&quot;#Swift中的界面传值&quot; class=&quot;headerlink&quot; title=&quot;Swift中的界面传值&quot;&gt;&lt;/a&gt;Swift中的界面传值&lt;/h1&gt;&lt;p&gt;标签： 特性&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;正向页面传值-通过代码&quot;&gt;&lt;a href=&quot;#正向页面传值-通过代码&quot; class=&quot;headerlink&quot; title=&quot;正向页面传值-通过代码&quot;&gt;&lt;/a&gt;正向页面传值-通过代码&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;    有A、B两个控制器，A要把文本的里的string传给B 
     在B中定义一个属性
       var txtStr
   //在A要进入B控制器的操作中 
var secondVC:SecondViewController = SecondViewController() 
secondVC.txtStr = self.text 
presentViewController(secondVC , animated: true, completion: nil)
     //在B中要显示的控件中赋值 
self.label.text = txtStr
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;正向传值第二种方法&quot;&gt;&lt;a href=&quot;#正向传值第二种方法&quot; class=&quot;headerlink&quot; title=&quot;正向传值第二种方法&quot;&gt;&lt;/a&gt;正向传值第二种方法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;有A、B两个控制器，A要把文本的里的string传给B
//在B中定义一个属性
var txtStr
//在B中重写init()方法
init(text:String)
{
self.txtStr = text
super.init(nibName: nil, bundle: nil)
}
//在A要进入B控制器的操作中
var secondVC:SecondViewController = SecondViewController(text:self.text)
presentViewController(secondVC , animated: true, completion: nil)
//在B中要显示的控件中赋值
self.label.text = txtStr
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;正向页面传值第三种方法-通过Storyboard&quot;&gt;&lt;a href=&quot;#正向页面传值第三种方法-通过Storyboard&quot; class=&quot;headerlink&quot; title=&quot;正向页面传值第三种方法-通过Storyboard&quot;&gt;&lt;/a&gt;正向页面传值第三种方法-通过Storyboard&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;有A、B两个控制器，A要把文本的里的string传给B
两个 View 之间要用 Modal 类型的 Segue 来连接
//在B中定义一个属性
var txtStr
//在A中重写prepareForSegue方法
  let destVc: secondVC:SecondViewController = segue.destionViewController as! secondVC:SecondViewController
//将A中的值赋值到B中的属性
destVc.textStr = self.text
//在B中要显示的控件中赋值
 self.label.text = txtStr
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Delegate反向传值&quot;&gt;&lt;a href=&quot;#Delegate反向传值&quot; class=&quot;headerlink&quot; title=&quot;Delegate反向传值&quot;&gt;&lt;/a&gt;Delegate反向传值&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;谁要传值谁就拥有代理属性
有A、B两个控制器，A进入B，B再返回A，把文本里的String传给A
在A中定义一个属性
var txtStr:String?
给B定义一个协议
protocol SecondVcDelegate:NSObjectProtocol
{
    func SecondVcGiveTextToFirstVc(text: String)

}
再给B定义一个delegate 避免循环应用要加上weak
weak var delegate:SecondVcDelegate?
在B要跳转回A的时候调用代理
self.delegate?.SecondVcGiveTextToFirstVc(&amp;quot;test&amp;quot;)
在A中需要接受值的时候
let vc = SecondVc()
vc.delegate = self
extension FirstVc:delegate:SecondVcDelegate
{
    func SecondVcGiveTextToFirstVc(text: String)
    {
    txtStr = text
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;NSNotificationCenter传值&quot;&gt;&lt;a href=&quot;#NSNotificationCenter传值&quot; class=&quot;headerlink&quot; title=&quot;NSNotificationCenter传值&quot;&gt;&lt;/a&gt;NSNotificationCenter传值&lt;/h3&gt;&lt;p&gt;第一步 post一个通知&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; let info = [WDPictureWillOpen:pictureTopic!.cdn_img!]
NSNotificationCenter.defaultCenter().postNotificationName(WDPictureWillOpen, object: self, userInfo: info)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二步 接受通知&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(WDPictureTableViewController.openPothoBrowser(_:)), name: WDPictureWillOpen, object: nil)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第三步 实现接受通知的方法并拿到值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func openPothoBrowser(notify: NSNotification)
 {

   //一定要拦截
 guard let urlstr = notify.userInfo![WDPictureWillOpen] as? String  else
 {
     return
 }

 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第四步 一定要移除通知&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     deinit
{
 NSNotificationCenter.defaultCenter().removeObserver(self)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;NSUserDefault传值&quot;&gt;&lt;a href=&quot;#NSUserDefault传值&quot; class=&quot;headerlink&quot; title=&quot;NSUserDefault传值&quot;&gt;&lt;/a&gt;NSUserDefault传值&lt;/h3&gt;&lt;pre&gt;&lt;code&gt; 注意：NSUserDefaults是持久化存储 
//在需要传值的地方      
NSUserDefaults.standardUserDefaults().setObject(&amp;quot;test&amp;quot;, forKey: &amp;quot;test&amp;quot;) 
//取出值
   let str = NSUserDefaults.standardUserDefaults().objectForKey(&amp;quot;test&amp;quot;) print(Str)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;闭包传值&quot;&gt;&lt;a href=&quot;#闭包传值&quot; class=&quot;headerlink&quot; title=&quot;闭包传值&quot;&gt;&lt;/a&gt;闭包传值&lt;/h3&gt;&lt;h3 id=&quot;单例传值&quot;&gt;&lt;a href=&quot;#单例传值&quot; class=&quot;headerlink&quot; title=&quot;单例传值&quot;&gt;&lt;/a&gt;单例传值&lt;/h3&gt;&lt;p&gt;占坑 有空再更&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Swift中的界面传值&quot;&gt;&lt;a href=&quot;#Swift中的界面传值&quot; class=&quot;headerlink&quot; title=&quot;Swift中的界面传值&quot;&gt;&lt;/a&gt;Swift中的界面传值&lt;/h1&gt;&lt;p&gt;标签： 特性&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/04/19/iOS%E4%B8%AD%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/"/>
    <id>http://yoursite.com/2016/04/19/iOS中的本地推送与远程推送/</id>
    <published>2016-04-19T06:01:41.000Z</published>
    <updated>2016-04-19T06:01:41.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS中的本地推送与远程推送&quot;&gt;&lt;a href=&quot;#iOS中的本地推送与远程推送&quot; class=&quot;headerlink&quot; title=&quot;iOS中的本地推送与远程推送&quot;&gt;&lt;/a&gt;iOS中的本地推送与远程推送&lt;/h1&gt;&lt;p&gt;标签： 特性&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;本地推送&quot;&gt;&lt;a href=&quot;#本地推送&quot; class=&quot;headerlink&quot; title=&quot;本地推送&quot;&gt;&lt;/a&gt;本地推送&lt;/h3&gt;&lt;p&gt;第一步&lt;br&gt;在AppDelegate中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    //添加本地推送
   if #available(iOS 8.0, *) {
let uns =     UIUserNotificationSettings(forTypes: [.Alert, .Badge, .Sound], categories: nil)
UIApplication.sharedApplication().registerUserNotificationSettings(uns)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二步&lt;br&gt;在需要推送的事件里&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; let localNotification = UILocalNotification()
//推送的文字内容
localNotification.alertBody = &amp;quot;你已经完成了一个番茄钟啦&amp;quot;
//app名字
if #available(iOS 8.2, *) {
   localNotification.alertTitle = &amp;quot;Pomodoro&amp;quot;
} else {
// Fallback on earlier versions
}
//app右上角的红标
localNotification.applicationIconBadgeNumber = 1
//通知时的音效
  localnotification.soundName = &amp;quot;buyao.wav
  //滑动的事件提示
  localNotification.alertAction = &amp;quot;输入任务内容&amp;quot;

  //立即发送推送
    UIApplication.sharedApplication().presentLocalNotificationNow(localNotification)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果要设置特定时间发送&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; //通知触发时间
localNotification.fireDate = NSDate(timeInterval: &amp;lt;#T##NSTimeInterval#&amp;gt;, sinceDate: &amp;lt;#T##NSDate#&amp;gt;)
  //添加推送
  UIApplication.sharedApplication().scheduleLocalNotification(localNotification)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第三步&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;设置当用户切回app时的操作
func applicationDidBecomeActive(application: UIApplication) {
// Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
//删除通知
application.cancelAllLocalNotifications()
//让角标消失
application.applicationIconBadgeNumber = 0
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;推送有关的方法&quot;&gt;&lt;a href=&quot;#推送有关的方法&quot; class=&quot;headerlink&quot; title=&quot;推送有关的方法&quot;&gt;&lt;/a&gt;推送有关的方法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1.func applicationWillResignActive(application: UIApplication){} 当App既将进入后台、锁屏、有电话进来时会触发此事件

2.func applicationDidEnterBackground(application: UIApplication) {} 当App进入后台时触发此事件

3.func applicationWillEnterForeground(application: UIApplication) {} 当App从后台即将回到前台时触发此事件

4.func applicationDidBecomeActive(application: UIApplication) {}当App变成活动状态时触发此事件

5.func applicationWillTerminate(application: UIApplication) {} 当App退出时触发此方法，一般用于保存
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;###远程推送&lt;br&gt;占坑 有空更&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS中的本地推送与远程推送&quot;&gt;&lt;a href=&quot;#iOS中的本地推送与远程推送&quot; class=&quot;headerlink&quot; title=&quot;iOS中的本地推送与远程推送&quot;&gt;&lt;/a&gt;iOS中的本地推送与远程推送&lt;/h1&gt;&lt;p&gt;标签： 特性&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/04/19/%E5%AE%9E%E7%8E%B0iOS%E5%90%AF%E5%8A%A8%E9%A1%B5%E6%B7%A1%E5%87%BA%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2016/04/19/实现iOS启动页淡出效果/</id>
    <published>2016-04-19T05:49:36.000Z</published>
    <updated>2016-04-19T05:49:36.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;实现iOS启动页淡出效果&quot;&gt;&lt;a href=&quot;#实现iOS启动页淡出效果&quot; class=&quot;headerlink&quot; title=&quot;实现iOS启动页淡出效果&quot;&gt;&lt;/a&gt;实现iOS启动页淡出效果&lt;/h1&gt;&lt;p&gt;标签： 干货&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;先上Demo：&lt;a href=&quot;https://github.com/w11p3333/LaunchDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/w11p3333/LaunchDemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;思路：将launchScreen作为window的一个addsubview&lt;/p&gt;
&lt;p&gt;实现：&lt;br&gt;1.在LaunchScreen中将Storyboard ID设置为Launch&lt;br&gt;2.实现方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private func launchAnimation()
{

let vc = UIStoryboard(name:     &amp;quot;LaunchScreen&amp;quot;, bundle: nil).instantiateViewControllerWithIdentifier(&amp;quot;Launch&amp;quot;)
let launchview = vc.view
let delegate =     UIApplication.sharedApplication().delegate
let mainWindow = delegate?.window
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mainWindow!!.addSubview(launchview)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UIView.animateWithDuration(1, delay: 0.5, options: UIViewAnimationOptions.BeginFromCurrentState, animations: {
launchview.alpha = 0.0
launchview.layer.transform = CATransform3DScale(CATransform3DIdentity, 1.5, 1.5, 1.0)
}) { (finished) in
launchview.removeFromSuperview()
}
  }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.注意：若是应用使用storyboard中加载的，需要在初始界面的viewcontroller的viewDidAppear方法中调用。&lt;/p&gt;
&lt;p&gt;若是应用从代码中加载的，需要在AppDelegate中didFinishLaunchingWithOptions方法中调用&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现iOS启动页淡出效果&quot;&gt;&lt;a href=&quot;#实现iOS启动页淡出效果&quot; class=&quot;headerlink&quot; title=&quot;实现iOS启动页淡出效果&quot;&gt;&lt;/a&gt;实现iOS启动页淡出效果&lt;/h1&gt;&lt;p&gt;标签： 干货&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/04/19/Git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/04/19/Git的使用/</id>
    <published>2016-04-19T05:49:12.000Z</published>
    <updated>2016-04-19T05:49:12.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Git的使用&quot;&gt;&lt;a href=&quot;#Git的使用&quot; class=&quot;headerlink&quot; title=&quot;Git的使用&quot;&gt;&lt;/a&gt;Git的使用&lt;/h1&gt;&lt;p&gt;标签： 工具&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;网上关于git命令的使用虽然多，但是太杂而且错误百出，我也是踩了许多坑，总结了下常用的。现在觉得敲git简直不要太爽233333&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;git的安装&quot;&gt;&lt;a href=&quot;#git的安装&quot; class=&quot;headerlink&quot; title=&quot;git的安装&quot;&gt;&lt;/a&gt;git的安装&lt;/h3&gt;&lt;p&gt;先安装homebrew&lt;br&gt;再执行brew install git&lt;/p&gt;
&lt;h3 id=&quot;配置git-ssh&quot;&gt;&lt;a href=&quot;#配置git-ssh&quot; class=&quot;headerlink&quot; title=&quot;配置git ssh&quot;&gt;&lt;/a&gt;配置git ssh&lt;/h3&gt;&lt;p&gt;在终端&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//邮箱不一定是github账号
ssh-keygen -t rsa -C &amp;quot;yourname@hotmail.com&amp;quot;

//按3个回车，密码为空。
//获取key
cat ~/.ssh/id_rsa.pub
将得到的key在github中ssh key中添加
//连接github
ssh -T git@github.com
//出现Hi w11p3333! You&amp;apos;ve successfully authenticated, but GitHub does not provide shell access.为成功
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;###搭建github博客&lt;br&gt;见此文&lt;a href=&quot;http://www.jianshu.com/p/4eaddcbe4d12&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/4eaddcbe4d12&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如发生报错：ERROR Process failed: layout/.DS_Store, 那么进入主题里面layout和_partial目录下，使用删除命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm-rf.DS_Store
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本地测试：hexo s&lt;br&gt;退出测试：control + c&lt;br&gt;发布博客：hexo clean &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo d&lt;br&gt;前文：&lt;!--more--&gt;&lt;/p&gt;
&lt;h3 id=&quot;一个项目完整的git流程&quot;&gt;&lt;a href=&quot;#一个项目完整的git流程&quot; class=&quot;headerlink&quot; title=&quot;一个项目完整的git流程&quot;&gt;&lt;/a&gt;一个项目完整的git流程&lt;/h3&gt;&lt;p&gt;在这之前你应该在github上已经创建好仓库了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   //注意要先cd到项目目录
//克隆项目
git clone https://github.com/GithubName/ProjectName.git
//更改仓库地址
git remote add origin       https://github.com/GithubName/ProjectName.git
//添加项目
git add -A     // -A是添加全部 只添加修改的话使用git add .
//提交修改
git commit -m &amp;quot;edit&amp;quot;
//如果项目与当地不一致
git pull  // 如果提示错误了使用  git pull --rebase origin master
//提交到远程仓库
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;一些常用的命令&quot;&gt;&lt;a href=&quot;#一些常用的命令&quot; class=&quot;headerlink&quot; title=&quot;一些常用的命令&quot;&gt;&lt;/a&gt;一些常用的命令&lt;/h3&gt;&lt;h3 id=&quot;更改远程仓库&quot;&gt;&lt;a href=&quot;#更改远程仓库&quot; class=&quot;headerlink&quot; title=&quot;更改远程仓库&quot;&gt;&lt;/a&gt;更改远程仓库&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/GithubName/ProjectName.git
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;删除远程仓库内所有文件&quot;&gt;&lt;a href=&quot;#删除远程仓库内所有文件&quot; class=&quot;headerlink&quot; title=&quot;删除远程仓库内所有文件&quot;&gt;&lt;/a&gt;删除远程仓库内所有文件&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;cd到项目文件夹

  git rm * -r  
  git add .
  git commit -m &amp;quot;clear&amp;quot;
  git push -u origin master
回退版本
 git log   //查看日志 找到对应的hash值
 git reset --hard f093b6ed512f761a346e2e5c0f00230e448c217c  //改成对应的hash值
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;退出git-log&quot;&gt;&lt;a href=&quot;#退出git-log&quot; class=&quot;headerlink&quot; title=&quot;退出git log&quot;&gt;&lt;/a&gt;退出git log&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;按q
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;修改用户&quot;&gt;&lt;a href=&quot;#修改用户&quot; class=&quot;headerlink&quot; title=&quot;修改用户&quot;&gt;&lt;/a&gt;修改用户&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[~]$ git config --global user.name &amp;quot;lubin&amp;quot; 
[~]$ git config --global user.email lubin.z@gmail.com 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;在readme中添加图片&quot;&gt;&lt;a href=&quot;#在readme中添加图片&quot; class=&quot;headerlink&quot; title=&quot;在readme中添加图片&quot;&gt;&lt;/a&gt;在readme中添加图片&lt;/h3&gt;&lt;p&gt;首先要添加图片到远程仓库里&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![](https://github.com/yourname/yourProjectname/raw/master/image/pic.png)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;常见的问题&quot;&gt;&lt;a href=&quot;#常见的问题&quot; class=&quot;headerlink&quot; title=&quot;常见的问题&quot;&gt;&lt;/a&gt;常见的问题&lt;/h3&gt;&lt;h3 id=&quot;1-The-following-untracked-working-tree-files-would-be-overwritten-by-checkout和-Please-move-or-remove-them-before-you-can-merge&quot;&gt;&lt;a href=&quot;#1-The-following-untracked-working-tree-files-would-be-overwritten-by-checkout和-Please-move-or-remove-them-before-you-can-merge&quot; class=&quot;headerlink&quot; title=&quot;1.The following untracked working tree files would be overwritten by checkout和 Please move or remove them before you can merge&quot;&gt;&lt;/a&gt;1.The following untracked working tree files would be overwritten by checkout和 Please move or remove them before you can merge&lt;/h3&gt;&lt;p&gt;解决方案&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clean  -d  -fx &amp;quot;&amp;quot;
其中
x  -----删除忽略文件已经对git来说不识别的文件
d  -----删除未被添加到git的路径中的文件
f  -----强制运行
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-remote-origin-already-exists&quot;&gt;&lt;a href=&quot;#2-remote-origin-already-exists&quot; class=&quot;headerlink&quot; title=&quot;2.remote origin already exists&quot;&gt;&lt;/a&gt;2.remote origin already exists&lt;/h3&gt;&lt;p&gt;解决方案&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1、先输入$ git remote rm origin

2、再输入$ git remote add 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Not-a-git-repository-or-any-of-the-parent-directories-git&quot;&gt;&lt;a href=&quot;#Not-a-git-repository-or-any-of-the-parent-directories-git&quot; class=&quot;headerlink&quot; title=&quot;Not a git repository (or any of the parent directories): .git&quot;&gt;&lt;/a&gt;Not a git repository (or any of the parent directories): .git&lt;/h3&gt;&lt;p&gt;git init就可以了！ &lt;/p&gt;
&lt;h3 id=&quot;3-Pull-is-not-possible-because-you-have-unmerged-files&quot;&gt;&lt;a href=&quot;#3-Pull-is-not-possible-because-you-have-unmerged-files&quot; class=&quot;headerlink&quot; title=&quot;3.Pull is not possible because you have unmerged files.&quot;&gt;&lt;/a&gt;3.Pull is not possible because you have unmerged files.&lt;/h3&gt;&lt;p&gt;local文件冲突了,pull会使用git merge导致冲突，需要将冲突的文件resolve掉 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add -u, git commit       
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git的使用&quot;&gt;&lt;a href=&quot;#Git的使用&quot; class=&quot;headerlink&quot; title=&quot;Git的使用&quot;&gt;&lt;/a&gt;Git的使用&lt;/h1&gt;&lt;p&gt;标签： 工具&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;网上关于git命令的使用虽然多，但是太杂而且错误百出，我也是踩了许多坑，总结了下常用的。现在觉得敲git简直不要太爽233333&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/04/19/%E5%AE%9E%E7%8E%B0%E6%B5%81%E5%8A%A8%E6%95%88%E6%9E%9C%E5%88%92%E5%87%BA%E7%9A%84Tableview/"/>
    <id>http://yoursite.com/2016/04/19/实现流动效果划出的Tableview/</id>
    <published>2016-04-19T05:48:32.000Z</published>
    <updated>2016-04-19T05:48:32.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;实现流动效果划出的Tableview&quot;&gt;&lt;a href=&quot;#实现流动效果划出的Tableview&quot; class=&quot;headerlink&quot; title=&quot;实现流动效果划出的Tableview&quot;&gt;&lt;/a&gt;实现流动效果划出的Tableview&lt;/h1&gt;&lt;p&gt;标签： 干货&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;先上Demo：&lt;a href=&quot;https://github.com/w11p3333/LLXAnimateTableview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/w11p3333/LLXAnimateTableview&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![动画效果][1]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主要实现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func animationTable() {

self.tableView.reloadData()

let cells = tableView.visibleCells
let tableHeight: CGFloat = tableView.bounds.size.height

for i in cells {
    let cell: UITableViewCell = i as UITableViewCell
    cell.transform = CGAffineTransformMakeTranslation(0, tableHeight)
}

var index = 0

for a in cells {
    let cell: UITableViewCell = a as UITableViewCell
    UIView.animateWithDuration(1.0, delay: 0.05 * Double(index), usingSpringWithDamping: 0.8, initialSpringVelocity: 0, options: [], animations: {
        cell.transform = CGAffineTransformMakeTranslation(0, 0);
    }, completion: nil)

    index += 1
}
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在viewWillAppear中调用它&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现流动效果划出的Tableview&quot;&gt;&lt;a href=&quot;#实现流动效果划出的Tableview&quot; class=&quot;headerlink&quot; title=&quot;实现流动效果划出的Tableview&quot;&gt;&lt;/a&gt;实现流动效果划出的Tableview&lt;/h1&gt;&lt;p&gt;标签： 干货&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/04/19/hello-world/"/>
    <id>http://yoursite.com/2016/04/19/hello-world/</id>
    <published>2016-04-19T04:29:36.000Z</published>
    <updated>2016-04-19T04:49:11.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;CocoaPods及Carthage的使用&quot;&gt;&lt;a href=&quot;#CocoaPods及Carthage的使用&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods及Carthage的使用&quot;&gt;&lt;/a&gt;CocoaPods及Carthage的使用&lt;/h1&gt;&lt;p&gt;作为iOS中最好用的两个依赖管理，是我们必须学会的。使用上来说CocoaPods更加方便，Carthage的侵入性比较低，但是很多库没有，所以我个人还是使用Cocoapods为主。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Cocoapods基于Alcatraz安装CocoaPods报错的问题&quot;&gt;&lt;a href=&quot;#Cocoapods基于Alcatraz安装CocoaPods报错的问题&quot; class=&quot;headerlink&quot; title=&quot;Cocoapods基于Alcatraz安装CocoaPods报错的问题&quot;&gt;&lt;/a&gt;Cocoapods基于Alcatraz安装CocoaPods报错的问题&lt;/h1&gt;&lt;p&gt;用Alcatraz安装CocoaPods，执行install pods命令会报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Resolved command path for &amp;quot;pod&amp;quot; is invalid。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原因：软件云被屏蔽&lt;br&gt;解决方法：把亚马逊的云服务改成国内淘宝源的服务&lt;br&gt;打开Terminal，然后键入以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem install -n /usr/local/bin cocoa pods
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行完这句如果报告错误&lt;br&gt;这是因为ruby的软件源rubygems.org因为使用亚马逊的云服务，被屏蔽了，需要更新一下ruby的源，过程如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem sources -l (查看当前ruby的源)
$ gem sources --remove https://rubygems.org/ 
 $ gem sources -a https://ruby.taobao.org/ 
 $ gem sources -l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果gem太老，可以尝试用如下命令升级&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem $ sudo gem update --system
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;升级成功后会提示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RubyGems system software updated
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后重新执行安装下载命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时候应该没什么问题了接下来进行安装，执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pod setup
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Terminal会停留在 Setting up CocoaPods master repo 这个状态一段时间,是因为要进行下载安装,而且目录比较大,需要耐心等待一下。看到complete字段就是安装成功了&lt;/p&gt;
&lt;p&gt;导入框架方法&lt;br&gt;点击Xcode&amp;gt;Product&amp;gt;Cocoapods&amp;gt;create podfile&lt;/p&gt;
&lt;p&gt;填入想导入的框架&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;platform :ios, &amp;quot;8.0&amp;quot;

use_frameworks!
pod &amp;quot;AFNetworking&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在执行Install pods就ok了&lt;/p&gt;
&lt;h1 id=&quot;Carthage&quot;&gt;&lt;a href=&quot;#Carthage&quot; class=&quot;headerlink&quot; title=&quot;Carthage&quot;&gt;&lt;/a&gt;Carthage&lt;/h1&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install carthage
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用&lt;br&gt;1.进入项目所在文件夹&lt;br&gt;2.创建一个空的carthage文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch Cartfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.使用XCode打开文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;open -a Xcode Cartfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.编辑Cartfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github &amp;quot;SVProgressHUD/SVProgressHUD&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5.运行Carthage&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;carthage update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6.加载framework&lt;br&gt;    在项目文件夹中找到Carthage/Build/iOS/&lt;br&gt;    将需要的framework加入xcode中的Embedded Binaries&lt;br&gt;或者&lt;br&gt;    在项目中引入依赖的 Framkework，只需要在对应 Target 中的 Build Setting 中的 Framework Search Path 项加入以下路径，Xcode 便会自动搜索目录下的 Framework：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(SRCROOT)/Carthage/Build/iOS
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7.导入框架使用吧&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CocoaPods及Carthage的使用&quot;&gt;&lt;a href=&quot;#CocoaPods及Carthage的使用&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods及Carthage的使用&quot;&gt;&lt;/a&gt;CocoaPods及Carthage的使用&lt;/h1&gt;&lt;p&gt;作为iOS中最好用的两个依赖管理，是我们必须学会的。使用上来说CocoaPods更加方便，Carthage的侵入性比较低，但是很多库没有，所以我个人还是使用Cocoapods为主。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/03/31/iOS%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/03/31/iOS框架使用/</id>
    <published>2016-03-31T07:31:27.000Z</published>
    <updated>2016-04-19T02:48:33.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS中一些实用框架的使用&quot;&gt;&lt;a href=&quot;#iOS中一些实用框架的使用&quot; class=&quot;headerlink&quot; title=&quot;iOS中一些实用框架的使用&quot;&gt;&lt;/a&gt;iOS中一些实用框架的使用&lt;/h1&gt;&lt;p&gt;SDCycleScrollView、RxWebViewController、KGFloatingDrawer、AFSoundManager、YZDisplayViewController、FMDB、masonry&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;SDCycleScrollView&quot;&gt;&lt;a href=&quot;#SDCycleScrollView&quot; class=&quot;headerlink&quot; title=&quot;SDCycleScrollView&quot;&gt;&lt;/a&gt;SDCycleScrollView&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gsdios/SDCycleScrollView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/gsdios/SDCycleScrollView&lt;/a&gt;&lt;br&gt;实现图片轮播框架&lt;br&gt;使用方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let imageGroup = [&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;4&amp;quot;,&amp;quot;5&amp;quot;]

let scrollview = SDCycleScrollView(frame: CGRectMake(0, 0, (UIScreen.mainScreen().bounds.width), 200), imageNamesGroup: imageGroup)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;RxWebViewController&quot;&gt;&lt;a href=&quot;#RxWebViewController&quot; class=&quot;headerlink&quot; title=&quot;RxWebViewController&quot;&gt;&lt;/a&gt;RxWebViewController&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Roxasora/RxWebViewController&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Roxasora/RxWebViewController&lt;/a&gt;&lt;br&gt;仿微信效果的webview&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let vc = RxWebViewController(url: url)
self.navigationController?.pushViewController(vc, animated: true)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;KGFloatingDrawer&quot;&gt;&lt;a href=&quot;#KGFloatingDrawer&quot; class=&quot;headerlink&quot; title=&quot;KGFloatingDrawer&quot;&gt;&lt;/a&gt;KGFloatingDrawer&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/KyleGoddard/KGFloatingDrawer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/KyleGoddard/KGFloatingDrawer&lt;/a&gt;&lt;br&gt;实现左右侧边栏框架&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;privatevar _drawerViewController: KGDrawerViewController?
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var drawerViewController: KGDrawerViewController {  
get {       
 if let viewController = _drawerViewController {       
 return viewController      
   }          

   returnprepareDrawerViewController()
}
  }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func prepareDrawerViewController() -&amp;gt; KGDrawerViewController {     
  let drawerViewController = KGDrawerViewController()    
  drawerViewController.centerViewController = viewControllerForStoryboardId(&amp;quot;center&amp;quot;)

drawerViewController.leftViewController = viewControllerForStoryboardId(&amp;quot;leftvc&amp;quot;)

  drawerViewController.rightViewController = viewControllerForStoryboardId(“rightvc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;drawerViewController.leftDrawerWidth = CGFloat(150)       
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   //背景图片     &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       _drawerViewController = drawerViewController      
return drawerViewController  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; private func drawerStoryboard() -&amp;gt; UIStoryboard {   
let storyboard = UIStoryboard(name: &amp;quot;Main&amp;quot;, bundle: nil)        return storyboard    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  private func viewControllerForStoryboardId(storyboardId: String) -&amp;gt; UIViewController {     
  let viewController: UIViewController = drawerStoryboard().instantiateViewControllerWithIdentifier(storyboardId) as! UIViewController   
 return viewController
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后将&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window?.rootViewController = drawerViewController
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在想要弹出的方法里&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let appDelegate = UIApplication.sharedApplication().delegateas! AppDelegate     
   appDelegate.drawerViewController.toggleDrawer(KGDrawerSide.Left, animated: true) { (finished) -&amp;gt; Void            in
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;AFSoundManager&quot;&gt;&lt;a href=&quot;#AFSoundManager&quot; class=&quot;headerlink&quot; title=&quot;AFSoundManager&quot;&gt;&lt;/a&gt;AFSoundManager&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/AlvaroFranco/AFSoundManager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/AlvaroFranco/AFSoundManager&lt;/a&gt;&lt;br&gt;音乐播放框架&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var player:AFSoundPlayback?

//开始播放音乐 


  AFSoundManager.sharedManager().startStreamingRemoteAudioFromURL(musicurl) { (percentage, elapsedTime, timeRemaining, error, finished) in


 //进度 percentage
//  elapsedTime 开始时间
//  timeRemaining 结束时间
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;暂停方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AFSoundManager.sharedManager().pause()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重播方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AFSoundManager.sharedManager().resume()
MJRefresh
https://github.com/CoderMJLee/MJRefresh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;刷新控件框架&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/// header    var header:MJRefreshNormalHeader{  
 return (self.tableView.tableHeaderViewas? MJRefreshNormalHeader)!  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   }   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**  footer  */ 
    var footer:MJRefreshFooter{   
  return (self.tableView.tableFooterViewas? MJRefreshFooter)!

 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方法中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func  setUpRefrshControl()    {       
   /**        上拉刷新        */   
tableView.tableHeaderView = MJRefreshNormalHeader.init(refreshingBlock: { () -&amp;gt; Voidin            self.footer.endRefreshing()

  self.tableView.reloadData()     

   self.header.endRefreshing()               

      })    
    header.automaticallyChangeAlpha = true     
      header.beginRefreshing()    
   /**        下拉刷新        */         
     tableView.tableFooterView = MJRefreshAutoNormalFooter.init(refreshingBlock: { () -&amp;gt; Void in      
  self.header.endRefreshing()  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   self.footer.beginRefreshing()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; self.tableView.reloadData()                self.footer.endRefreshing()               

 })       

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;YZDisplayViewController&quot;&gt;&lt;a href=&quot;#YZDisplayViewController&quot; class=&quot;headerlink&quot; title=&quot;YZDisplayViewController&quot;&gt;&lt;/a&gt;YZDisplayViewController&lt;/h1&gt;&lt;p&gt;滑动标题栏框架&lt;br&gt;&lt;a href=&quot;https://github.com/iThinkerYZ/YZDisplayViewController&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/iThinkerYZ/YZDisplayViewController&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 设置标题样式
*/
 func setupTitle()
{

isShowUnderLine = true
underLineColor = bgcolor
isShowTitleGradient = true
isShowTitleCover = false

titleHeight = 38
endR = 32 / 255.0
endG = 142 / 255.0
endB = 115 / 255.0

  // 是否显示遮盖
  titleScrollViewColor = UIColor.whiteColor()

  coverColor = UIColor(white: 0.7, alpha: 0.4)
  coverCornerRadius = 13
  norColor = UIColor.blackColor()
  selColor = UIColor.whiteColor()
   }



/**
 添加子控制器
 */
func setupAllControllers()
{
 let text = WDTextTableViewController()
text.title = &amp;quot;糗事&amp;quot;
addChildViewController(text)
let picture = WDPictureTableViewController()
picture.title = &amp;quot;图片&amp;quot;
addChildViewController(picture)
let video = WDVideoTableViewController()
video.title = &amp;quot;视频&amp;quot;
addChildViewController(video)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;LLXWaterFlow&quot;&gt;&lt;a href=&quot;#LLXWaterFlow&quot; class=&quot;headerlink&quot; title=&quot;LLXWaterFlow&quot;&gt;&lt;/a&gt;LLXWaterFlow&lt;/h1&gt;&lt;p&gt;我写的一个瀑布流的实现&lt;br&gt;&lt;a href=&quot;https://github.com/w11p3333/LLXWaterFlow&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/w11p3333/LLXWaterFlow&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;FMDB&quot;&gt;&lt;a href=&quot;#FMDB&quot; class=&quot;headerlink&quot; title=&quot;FMDB&quot;&gt;&lt;/a&gt;FMDB&lt;/h1&gt;&lt;p&gt;不能用cocoa pod导入&lt;br&gt;先从github下好拖进工程里&lt;br&gt;再创建一个桥接文件 swift-brige&lt;br&gt;在设置中添加sqlite3 库&lt;br&gt;在build settings中搜索Bridging Header&lt;br&gt;添加桥接文件的路径（在本工程内的路径）&lt;br&gt;使用FMDatabaseQueue相比FMDatabase是数据安全的，并且不需要打开数据库的流程&lt;/p&gt;
&lt;h1 id=&quot;masonry&quot;&gt;&lt;a href=&quot;#masonry&quot; class=&quot;headerlink&quot; title=&quot;masonry&quot;&gt;&lt;/a&gt;masonry&lt;/h1&gt;&lt;p&gt;实现方便的代码实现autolayout&lt;br&gt;使用方法&lt;br&gt;   有make remake update三种方法 传进去的参数要加mas_前缀 mas_equalTo 会对参数进行包装 equalTo 不会对参数进行包装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  //尺寸约束
  make.size.as_equalTo(CGSizeMake(x,y)); 
   //位置约束 居中
make.centerX.mas_equalTo(self.view.centerX);    
  make.centerY.mas_equalTo(self.view.centerY); 
   //设置到边的距离      
    make.right.mas_euqalTo(self.view).offset(20);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Parse-for-iOS&quot;&gt;&lt;a href=&quot;#Parse-for-iOS&quot; class=&quot;headerlink&quot; title=&quot;Parse for iOS&quot;&gt;&lt;/a&gt;Parse for iOS&lt;/h1&gt;&lt;p&gt;为ios提供后端&lt;br&gt;用法：&lt;a href=&quot;http://www.mobile-open.com/2015/41095.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mobile-open.com/2015/41095.html&lt;/a&gt;&lt;br&gt;官网：&lt;br&gt;&lt;a href=&quot;https://parse.com/docs/cn/ios/guidehttp://zhuanlan.zhihu.com/p/19597061&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://parse.com/docs/cn/ios/guidehttp://zhuanlan.zhihu.com/p/19597061&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;LeanClound&quot;&gt;&lt;a href=&quot;#LeanClound&quot; class=&quot;headerlink&quot; title=&quot;LeanClound&quot;&gt;&lt;/a&gt;LeanClound&lt;/h1&gt;&lt;h1 id=&quot;Realm&quot;&gt;&lt;a href=&quot;#Realm&quot; class=&quot;headerlink&quot; title=&quot;Realm&quot;&gt;&lt;/a&gt;Realm&lt;/h1&gt;&lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;p&gt;一些常用的SVProgressHUD/AFN/Alamofire/SDWebImage&lt;br&gt;的使用都比较简单我这里就暂时不写了&lt;/p&gt;
&lt;p&gt;不定时更新&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS中一些实用框架的使用&quot;&gt;&lt;a href=&quot;#iOS中一些实用框架的使用&quot; class=&quot;headerlink&quot; title=&quot;iOS中一些实用框架的使用&quot;&gt;&lt;/a&gt;iOS中一些实用框架的使用&lt;/h1&gt;&lt;p&gt;SDCycleScrollView、RxWebViewController、KGFloatingDrawer、AFSoundManager、YZDisplayViewController、FMDB、masonry&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
