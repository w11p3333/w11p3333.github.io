<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AppleCatKay.Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-19T04:49:11.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LuLiangXiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/04/19/hello-world/"/>
    <id>http://yoursite.com/2016/04/19/hello-world/</id>
    <published>2016-04-19T04:29:36.000Z</published>
    <updated>2016-04-19T04:49:11.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;CocoaPods及Carthage的使用&quot;&gt;&lt;a href=&quot;#CocoaPods及Carthage的使用&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods及Carthage的使用&quot;&gt;&lt;/a&gt;CocoaPods及Carthage的使用&lt;/h1&gt;&lt;p&gt;作为iOS中最好用的两个依赖管理，是我们必须学会的。使用上来说CocoaPods更加方便，Carthage的侵入性比较低，但是很多库没有，所以我个人还是使用Cocoapods为主。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Cocoapods基于Alcatraz安装CocoaPods报错的问题&quot;&gt;&lt;a href=&quot;#Cocoapods基于Alcatraz安装CocoaPods报错的问题&quot; class=&quot;headerlink&quot; title=&quot;Cocoapods基于Alcatraz安装CocoaPods报错的问题&quot;&gt;&lt;/a&gt;Cocoapods基于Alcatraz安装CocoaPods报错的问题&lt;/h1&gt;&lt;p&gt;用Alcatraz安装CocoaPods，执行install pods命令会报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Resolved command path for &amp;quot;pod&amp;quot; is invalid。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原因：软件云被屏蔽&lt;br&gt;解决方法：把亚马逊的云服务改成国内淘宝源的服务&lt;br&gt;打开Terminal，然后键入以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem install -n /usr/local/bin cocoa pods
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行完这句如果报告错误&lt;br&gt;这是因为ruby的软件源rubygems.org因为使用亚马逊的云服务，被屏蔽了，需要更新一下ruby的源，过程如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem sources -l (查看当前ruby的源)
$ gem sources --remove https://rubygems.org/ 
 $ gem sources -a https://ruby.taobao.org/ 
 $ gem sources -l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果gem太老，可以尝试用如下命令升级&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem $ sudo gem update --system
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;升级成功后会提示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RubyGems system software updated
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后重新执行安装下载命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时候应该没什么问题了接下来进行安装，执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pod setup
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Terminal会停留在 Setting up CocoaPods master repo 这个状态一段时间,是因为要进行下载安装,而且目录比较大,需要耐心等待一下。看到complete字段就是安装成功了&lt;/p&gt;
&lt;p&gt;导入框架方法&lt;br&gt;点击Xcode&amp;gt;Product&amp;gt;Cocoapods&amp;gt;create podfile&lt;/p&gt;
&lt;p&gt;填入想导入的框架&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;platform :ios, &amp;quot;8.0&amp;quot;

use_frameworks!
pod &amp;quot;AFNetworking&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在执行Install pods就ok了&lt;/p&gt;
&lt;h1 id=&quot;Carthage&quot;&gt;&lt;a href=&quot;#Carthage&quot; class=&quot;headerlink&quot; title=&quot;Carthage&quot;&gt;&lt;/a&gt;Carthage&lt;/h1&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install carthage
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用&lt;br&gt;1.进入项目所在文件夹&lt;br&gt;2.创建一个空的carthage文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch Cartfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.使用XCode打开文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;open -a Xcode Cartfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.编辑Cartfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;github &amp;quot;SVProgressHUD/SVProgressHUD&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5.运行Carthage&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;carthage update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6.加载framework&lt;br&gt;    在项目文件夹中找到Carthage/Build/iOS/&lt;br&gt;    将需要的framework加入xcode中的Embedded Binaries&lt;br&gt;或者&lt;br&gt;    在项目中引入依赖的 Framkework，只需要在对应 Target 中的 Build Setting 中的 Framework Search Path 项加入以下路径，Xcode 便会自动搜索目录下的 Framework：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(SRCROOT)/Carthage/Build/iOS
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7.导入框架使用吧&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CocoaPods及Carthage的使用&quot;&gt;&lt;a href=&quot;#CocoaPods及Carthage的使用&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods及Carthage的使用&quot;&gt;&lt;/a&gt;CocoaPods及Carthage的使用&lt;/h1&gt;&lt;p&gt;作为iOS中最好用的两个依赖管理，是我们必须学会的。使用上来说CocoaPods更加方便，Carthage的侵入性比较低，但是很多库没有，所以我个人还是使用Cocoapods为主。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/03/31/iOS%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/03/31/iOS框架使用/</id>
    <published>2016-03-31T07:31:27.000Z</published>
    <updated>2016-04-19T02:48:33.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;iOS中一些实用框架的使用&quot;&gt;&lt;a href=&quot;#iOS中一些实用框架的使用&quot; class=&quot;headerlink&quot; title=&quot;iOS中一些实用框架的使用&quot;&gt;&lt;/a&gt;iOS中一些实用框架的使用&lt;/h1&gt;&lt;p&gt;SDCycleScrollView、RxWebViewController、KGFloatingDrawer、AFSoundManager、YZDisplayViewController、FMDB、masonry&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;SDCycleScrollView&quot;&gt;&lt;a href=&quot;#SDCycleScrollView&quot; class=&quot;headerlink&quot; title=&quot;SDCycleScrollView&quot;&gt;&lt;/a&gt;SDCycleScrollView&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gsdios/SDCycleScrollView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/gsdios/SDCycleScrollView&lt;/a&gt;&lt;br&gt;实现图片轮播框架&lt;br&gt;使用方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let imageGroup = [&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;4&amp;quot;,&amp;quot;5&amp;quot;]

let scrollview = SDCycleScrollView(frame: CGRectMake(0, 0, (UIScreen.mainScreen().bounds.width), 200), imageNamesGroup: imageGroup)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;RxWebViewController&quot;&gt;&lt;a href=&quot;#RxWebViewController&quot; class=&quot;headerlink&quot; title=&quot;RxWebViewController&quot;&gt;&lt;/a&gt;RxWebViewController&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Roxasora/RxWebViewController&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Roxasora/RxWebViewController&lt;/a&gt;&lt;br&gt;仿微信效果的webview&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let vc = RxWebViewController(url: url)
self.navigationController?.pushViewController(vc, animated: true)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;KGFloatingDrawer&quot;&gt;&lt;a href=&quot;#KGFloatingDrawer&quot; class=&quot;headerlink&quot; title=&quot;KGFloatingDrawer&quot;&gt;&lt;/a&gt;KGFloatingDrawer&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/KyleGoddard/KGFloatingDrawer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/KyleGoddard/KGFloatingDrawer&lt;/a&gt;&lt;br&gt;实现左右侧边栏框架&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;privatevar _drawerViewController: KGDrawerViewController?
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var drawerViewController: KGDrawerViewController {  
get {       
 if let viewController = _drawerViewController {       
 return viewController      
   }          

   returnprepareDrawerViewController()
}
  }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func prepareDrawerViewController() -&amp;gt; KGDrawerViewController {     
  let drawerViewController = KGDrawerViewController()    
  drawerViewController.centerViewController = viewControllerForStoryboardId(&amp;quot;center&amp;quot;)

drawerViewController.leftViewController = viewControllerForStoryboardId(&amp;quot;leftvc&amp;quot;)

  drawerViewController.rightViewController = viewControllerForStoryboardId(“rightvc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;drawerViewController.leftDrawerWidth = CGFloat(150)       
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   //背景图片     &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       _drawerViewController = drawerViewController      
return drawerViewController  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; private func drawerStoryboard() -&amp;gt; UIStoryboard {   
let storyboard = UIStoryboard(name: &amp;quot;Main&amp;quot;, bundle: nil)        return storyboard    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  private func viewControllerForStoryboardId(storyboardId: String) -&amp;gt; UIViewController {     
  let viewController: UIViewController = drawerStoryboard().instantiateViewControllerWithIdentifier(storyboardId) as! UIViewController   
 return viewController
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后将&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window?.rootViewController = drawerViewController
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在想要弹出的方法里&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let appDelegate = UIApplication.sharedApplication().delegateas! AppDelegate     
   appDelegate.drawerViewController.toggleDrawer(KGDrawerSide.Left, animated: true) { (finished) -&amp;gt; Void            in
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;AFSoundManager&quot;&gt;&lt;a href=&quot;#AFSoundManager&quot; class=&quot;headerlink&quot; title=&quot;AFSoundManager&quot;&gt;&lt;/a&gt;AFSoundManager&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/AlvaroFranco/AFSoundManager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/AlvaroFranco/AFSoundManager&lt;/a&gt;&lt;br&gt;音乐播放框架&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var player:AFSoundPlayback?

//开始播放音乐 


  AFSoundManager.sharedManager().startStreamingRemoteAudioFromURL(musicurl) { (percentage, elapsedTime, timeRemaining, error, finished) in


 //进度 percentage
//  elapsedTime 开始时间
//  timeRemaining 结束时间
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;暂停方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AFSoundManager.sharedManager().pause()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重播方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AFSoundManager.sharedManager().resume()
MJRefresh
https://github.com/CoderMJLee/MJRefresh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;刷新控件框架&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/// header    var header:MJRefreshNormalHeader{  
 return (self.tableView.tableHeaderViewas? MJRefreshNormalHeader)!  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   }   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**  footer  */ 
    var footer:MJRefreshFooter{   
  return (self.tableView.tableFooterViewas? MJRefreshFooter)!

 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方法中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func  setUpRefrshControl()    {       
   /**        上拉刷新        */   
tableView.tableHeaderView = MJRefreshNormalHeader.init(refreshingBlock: { () -&amp;gt; Voidin            self.footer.endRefreshing()

  self.tableView.reloadData()     

   self.header.endRefreshing()               

      })    
    header.automaticallyChangeAlpha = true     
      header.beginRefreshing()    
   /**        下拉刷新        */         
     tableView.tableFooterView = MJRefreshAutoNormalFooter.init(refreshingBlock: { () -&amp;gt; Void in      
  self.header.endRefreshing()  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   self.footer.beginRefreshing()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; self.tableView.reloadData()                self.footer.endRefreshing()               

 })       

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;YZDisplayViewController&quot;&gt;&lt;a href=&quot;#YZDisplayViewController&quot; class=&quot;headerlink&quot; title=&quot;YZDisplayViewController&quot;&gt;&lt;/a&gt;YZDisplayViewController&lt;/h1&gt;&lt;p&gt;滑动标题栏框架&lt;br&gt;&lt;a href=&quot;https://github.com/iThinkerYZ/YZDisplayViewController&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/iThinkerYZ/YZDisplayViewController&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 设置标题样式
*/
 func setupTitle()
{

isShowUnderLine = true
underLineColor = bgcolor
isShowTitleGradient = true
isShowTitleCover = false

titleHeight = 38
endR = 32 / 255.0
endG = 142 / 255.0
endB = 115 / 255.0

  // 是否显示遮盖
  titleScrollViewColor = UIColor.whiteColor()

  coverColor = UIColor(white: 0.7, alpha: 0.4)
  coverCornerRadius = 13
  norColor = UIColor.blackColor()
  selColor = UIColor.whiteColor()
   }



/**
 添加子控制器
 */
func setupAllControllers()
{
 let text = WDTextTableViewController()
text.title = &amp;quot;糗事&amp;quot;
addChildViewController(text)
let picture = WDPictureTableViewController()
picture.title = &amp;quot;图片&amp;quot;
addChildViewController(picture)
let video = WDVideoTableViewController()
video.title = &amp;quot;视频&amp;quot;
addChildViewController(video)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;LLXWaterFlow&quot;&gt;&lt;a href=&quot;#LLXWaterFlow&quot; class=&quot;headerlink&quot; title=&quot;LLXWaterFlow&quot;&gt;&lt;/a&gt;LLXWaterFlow&lt;/h1&gt;&lt;p&gt;我写的一个瀑布流的实现&lt;br&gt;&lt;a href=&quot;https://github.com/w11p3333/LLXWaterFlow&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/w11p3333/LLXWaterFlow&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;FMDB&quot;&gt;&lt;a href=&quot;#FMDB&quot; class=&quot;headerlink&quot; title=&quot;FMDB&quot;&gt;&lt;/a&gt;FMDB&lt;/h1&gt;&lt;p&gt;不能用cocoa pod导入&lt;br&gt;先从github下好拖进工程里&lt;br&gt;再创建一个桥接文件 swift-brige&lt;br&gt;在设置中添加sqlite3 库&lt;br&gt;在build settings中搜索Bridging Header&lt;br&gt;添加桥接文件的路径（在本工程内的路径）&lt;br&gt;使用FMDatabaseQueue相比FMDatabase是数据安全的，并且不需要打开数据库的流程&lt;/p&gt;
&lt;h1 id=&quot;masonry&quot;&gt;&lt;a href=&quot;#masonry&quot; class=&quot;headerlink&quot; title=&quot;masonry&quot;&gt;&lt;/a&gt;masonry&lt;/h1&gt;&lt;p&gt;实现方便的代码实现autolayout&lt;br&gt;使用方法&lt;br&gt;   有make remake update三种方法 传进去的参数要加mas_前缀 mas_equalTo 会对参数进行包装 equalTo 不会对参数进行包装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  //尺寸约束
  make.size.as_equalTo(CGSizeMake(x,y)); 
   //位置约束 居中
make.centerX.mas_equalTo(self.view.centerX);    
  make.centerY.mas_equalTo(self.view.centerY); 
   //设置到边的距离      
    make.right.mas_euqalTo(self.view).offset(20);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Parse-for-iOS&quot;&gt;&lt;a href=&quot;#Parse-for-iOS&quot; class=&quot;headerlink&quot; title=&quot;Parse for iOS&quot;&gt;&lt;/a&gt;Parse for iOS&lt;/h1&gt;&lt;p&gt;为ios提供后端&lt;br&gt;用法：&lt;a href=&quot;http://www.mobile-open.com/2015/41095.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mobile-open.com/2015/41095.html&lt;/a&gt;&lt;br&gt;官网：&lt;br&gt;&lt;a href=&quot;https://parse.com/docs/cn/ios/guidehttp://zhuanlan.zhihu.com/p/19597061&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://parse.com/docs/cn/ios/guidehttp://zhuanlan.zhihu.com/p/19597061&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;LeanClound&quot;&gt;&lt;a href=&quot;#LeanClound&quot; class=&quot;headerlink&quot; title=&quot;LeanClound&quot;&gt;&lt;/a&gt;LeanClound&lt;/h1&gt;&lt;h1 id=&quot;Realm&quot;&gt;&lt;a href=&quot;#Realm&quot; class=&quot;headerlink&quot; title=&quot;Realm&quot;&gt;&lt;/a&gt;Realm&lt;/h1&gt;&lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;p&gt;一些常用的SVProgressHUD/AFN/Alamofire/SDWebImage&lt;br&gt;的使用都比较简单我这里就暂时不写了&lt;/p&gt;
&lt;p&gt;不定时更新&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS中一些实用框架的使用&quot;&gt;&lt;a href=&quot;#iOS中一些实用框架的使用&quot; class=&quot;headerlink&quot; title=&quot;iOS中一些实用框架的使用&quot;&gt;&lt;/a&gt;iOS中一些实用框架的使用&lt;/h1&gt;&lt;p&gt;SDCycleScrollView、RxWebViewController、KGFloatingDrawer、AFSoundManager、YZDisplayViewController、FMDB、masonry&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
